name: "Terraform Plan"

# Trigger when a pull request is received
on:
  pull_request:
    paths: 
      - '**.tf'
      - '!**/README.md'
      - '!.github/**'     

jobs:
  terraform-plan:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: todo-app/aws/3-tier-app
    steps:
      # Checkout the code
      # Marketplace: https://github.com/marketplace/actions/checkout
      - name: "Setup - Checkout"
        uses: actions/checkout@v2.1.0

      # Downloads a specific version of Terraform CLI and adds it to PATH
      # Marketplace: https://github.com/marketplace/actions/hashicorp-setup-terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
         terraform_version: 0.13.5
         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Init pulls credentials from the .aws/credentials file by default
      - name: "Run - Terraform Init"
        run: |
          terraform init -input=false lab
      
      - name: "Run - Terraform Format check"
        run: |
          find . \( -path './lab/.terraform' \) -prune -o -type f -name '*.tf' | while read f
          do 
            terraform fmt -check $f
              if [ $? -ne 0 ]
              then
                  exit 1;
              fi
          done
                
      - name: "Run - Terraform Validate"
        run: |
          terraform validate lab

      # The id value is used for reference in the comment step via "steps.plan.outputs.stdout"
      # Note: Color is disabled to prevent messy characters from appearing in the pull request comment
#       - name: "Run - Terraform Plan"
#         id: plan
#         run: |
#           cd lab
#           terraform plan -input=false -no-color

#       # Submit a comment with the plan output to the pull request
#       - name: "Run - Terraform Comment"
#         uses: actions/github-script@0.9.0
#         env:
#           STDOUT: "```${{ steps.plan.outputs.stdout }}```"
#         with:
#           github-token: ${{ secrets.GITHUB_TOKEN }}
#           script: |
#             github.issues.createComment({
#               issue_number: context.issue.number,
#               owner: context.repo.owner,
#               repo: context.repo.repo,
#               body: process.env.STDOUT
#             })
