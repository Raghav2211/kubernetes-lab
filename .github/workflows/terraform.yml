name: 'Terraform'

on:
  push:
    branches:
    - main
  pull_request:
    branches: 
      - main

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./todo-app/aws/multi-az-deployment/lab

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v2
    
    # Static analysis of Terraform templates to spot potential security issues
      # Marketplace: https://github.com/marketplace/actions/terraform-security-scan
    - name: "Setup - Security Scan"
      uses: triat/terraform-security-scan@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    # Provides AWS credentials to Terraform
      # By default, Terraform checks the home directory for a .aws folder with a credential file
      # Documentation: https://docs.aws.amazon.com/ses/latest/DeveloperGuide/create-shared-credentials-file.html
    - name: "Setup - Build AWS Credentials"
      run: |
        mkdir -p ~/.aws
        echo "[default]" > ~/.aws/credentials
        echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
        echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
    
    - name: "Setup - Terraform CLI"
      uses: hashicorp/setup-terraform@v1.0.1

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init -input=false

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false -no-color
    
    # Submit a comment with the plan output to the pull request
    - name: "Run - Terraform Comment"
      uses: actions/github-script@0.9.0
      env:
        STDOUT: "```${{ steps.plan.outputs.stdout }}```"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: process.env.STDOUT
          })
